<!DOCTYPE html>
<html lang="en">

<head>

    <head>
        <script src="https://statics.teams.cdn.office.net/sdk/v1.6.0/js/MicrosoftTeams.min.js"
            integrity="sha384-mhp2E+BLMiZLe7rDIzj19WjgXJeI32NkPvrvvZBrMi5IvWup/1NUfS5xuYN5S3VT"
            crossorigin="anonymous"></script>
        <script src="https://statics.teams.microsoft.com/sdk/v1.7.0/js/MicrosoftTeams.min.js"></script>
        <script src="https://unpkg.com/@microsoft/teams-js/dist/MicrosoftTeams.min.js" crossorigin="anonymous"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
        <meta charset="UTF-8">
        <meta http-equiv="Content-Security-Policy"
            content="default-src *; style-src 'self' 'unsafe-inline' http://localhost:3978; script-src 'self' 'unsafe-inline' 'unsafe-eval'">
    </head>
    <style>
        #mainDiv {
            padding-left: 10%;
            padding-top: 2%;
        }
    </style>
</head>

<body id=mainDiv>
    <button onclick="requestConsent()" id="consent" style="display: none">Login</button>
    <div id="divGraphProfile" style="display: none"></div>
    <h4 id="successMsg"></h4>
    <div>

        <div class="radioClass">
            <label><input type="radio" name="notificationRadio" value="sendNotification" checked> Send
                Notification To User</label></br>
            <label><input type="radio" name="notificationRadio" value="customTopicNotification"> Send Notification
                with Custom Topic</label>
        </div></br>
        </br>
        <div class="sendNotification desc">
            <div class="mb">
                <div class="form-group fg">
                    <label for="title" class="title">Task Title</label>
                    <br>
                    </br>
                    <input type="text" id="taskTitle" name="taskTitle">
                </div>
                </br>
                <div class="form-group fg">
                    <label for="title-desc" class="description">Task Description</label><br>
                    </br>
                    <input type="text" id="taskDescription" name="taskDescription">
                    </br>
                </div>
            </div><br>
            <div class="modal-footer mf">
                </br>
                <button type="button" class="btn-send save" onclick="return SendNotificationToUser()">Send
                    Notification</button>
            </div>
        </div>
        <div class="customTopicNotification desc">
            <div class="mb">
                <div class="form-group fg">
                    <label for="DeployementTitle" class="DeployementTitle">Deployment Title</label><br>
                    </br>
                    <input type="text" id="DeployementTitle" name="DeployementTitle">
                </div>
                <div class="form-group fg">
                    </br>
                    <label for="deployment-desc" class="DeploymentDescription">Deployment Description</label><br>
                    </br><input type="text" id="DeploymentDescription" name="DeploymentDescription">
                </div>
            </div><br>
            <div class="modal-footer mf">
                </br>
                <button type="button" class="btn-send save" onclick="return customTopicNotification()">Notify with
                    Custom Topic</button>
            </div>
        </div>
    </div>


    <script>
        var token =  <%-token%>
            $(document).ready(function () {
                debugger;
                $(".customTopicNotification").hide();
                $('input[type="radio"]').click(function () {
                    var inputValue = $(this).attr("value");
                    var targetBox = $("." + inputValue);
                    $(".desc").not(targetBox).hide();
                    $(targetBox).show();
                });
            });
            var delegatedtoken = localStorage.getItem("accessToken");
        microsoftTeams.initialize();
        microsoftTeams.getContext(function (context) {
            var groupchatId = context.chatId;
            var username = context.upn;
            var userId = context.userObjectId;
        });
        var empty = true;
        $('input[type="text"]').each(function () {
            if ($(this).val() != "") {
                empty = false;
                return false;
            }
        });

        function SendNotificationToUser() {
            debugger;
            var isValid = true;
            $('#taskTitle,#taskDescription').each(function (e) {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                        "background": ""
                    });
                }
            });
            if (isValid == false) {
                e.preventDefault();
                return false;
            }
            var action = "EntityTopic";
            let taskInfo = {
                title: $('#taskTitle').val(),
                description: $('#taskDescription').val(),
                taskInfoAction: action,
            };

            microsoftTeams.getContext(function (context) {
                var groupchatId = context.chatId;
                var username = context.upn;
                var userId = context.userObjectId;

                $.ajax({
                    url: "https://graph.microsoft.com/v1.0/users/" + userId + "/teamwork/installedApps/?$expand=teamsAppDefinition",
                    type: "GET",
                    beforeSend: function (request) {
                        request.setRequestHeader("Authorization", "Bearer " + delegatedtoken);
                    },
                    success: function (profile) {
                        console.log(profile);
                        appId = getAppId(profile);
                        sendNotification(userId, taskInfo, token, appId);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                    },
                });
                microsoftTeams.tasks.submitTask(taskInfo);
                return true;
            });
        };

        function getAppId(appList){
            var list= appList.value;
            var i;
            for(i=0;i<list.length;i++){
                if(list[0].teamsAppDefinition['displayName']=="NotifyFeedApp-nikija"){
                    return list[0].id;
                }
            }

        }
        function sendNotification(userId, taskInfo, token, appId) {
            const postData = {
                "topic": {
                    "source": "entityUrl",
                    "value": "https://graph.microsoft.com/v1.0/users/" + userId + "/teamwork/installedApps/" + appId
                },
                "activityType": "taskCreated",
                "previewText": {
                    "content": "New Task Created"
                },
                "templateParameters": [
                    {
                        "name": "taskId",
                        "value": taskInfo.title
                    }
                ]
            };
            $.ajax({
                url: "https://graph.microsoft.com/v1.0/users/" + userId + "/teamwork/sendActivityNotification",
                type: "POST",
                data: JSON.stringify(postData),
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                beforeSend: function (request) {
                    request.setRequestHeader("Authorization", "Bearer " + token);
                },
                success: function (profile) {
                    console.log(profile);
                },
                error: function (xhr, textStatus, errorThrown) {
                    debugger;
                    console.log(xhr);
                    console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                },
            });
        }

        function customTopicNotification() {
            debugger;
            var isValid = true;
            $('#DeployementTitle,#DeploymentDescription').each(function (e) {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                        "background": ""
                    });
                }
            });
            if (isValid == false) {
                e.preventDefault();
                return false;
            }
            var action = "customTopic";
            let taskInfo = {
                DeployementTitle: $('#DeployementTitle').val(),
                DeploymentDescription: $('#DeploymentDescription').val(),
                taskInfoAction: action,
            };

            microsoftTeams.getContext(function (context) {
                var userId = context.userObjectId;
                var teamId = context.groupId;
                var channelId = context.channelId;
                const message = {
                    "body": {
                        "content": "New Deployment: " + taskInfo.DeployementTitle
                    }
                };
                $.ajax({
                    url: "https://graph.microsoft.com/v1.0/teams/" + teamId + "/channels/" + channelId + "/messages",
                    type: "POST",
                    data: JSON.stringify(message),
                    headers: {
                        Accept: 'application/json',
                        'Content-Type': 'application/json',
                    },
                    beforeSend: function (request) {
                        request.setRequestHeader("Authorization", "Bearer " + token);
                    },
                    success: function (response) {
                        console.log(response);
                        getNotification(token, taskInfo, teamId, response);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        debugger;
                        console.log(xhr);
                        console.log("textStatus: " + textStatus + ", errorThrown: chat" + errorThrown);
                    },
                });
            });
        };

        function getNotification(token, taskInfo, teamId, response) {
            debugger;
            const postData = {
                "topic": {
                    "source": "text",
                    "value": "Deployment Approvals Channel",
                    "webUrl": response.webUrl
                },
                "activityType": "deploymentApprovalRequired",
                "previewText": {
                    "content": "New deployment requires your approval"
                },
                "templateParameters": [
                    {
                        "name": "deploymentId",
                        "value": taskInfo.DeployementTitle
                    }
                ]
            };
            $.ajax({
                url: "https://graph.microsoft.com/v1.0/teams/" + teamId + "/sendActivityNotification",
                type: "POST",
                data: JSON.stringify(postData),
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                beforeSend: function (request) {
                    request.setRequestHeader("Authorization", "Bearer " + token);
                },
                success: function (profile) {
                    console.log(profile);
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.log(xhr);
                    console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                },
            });
        }
    </script>
</body>

</html>